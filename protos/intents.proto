// Copyright Aristech GmbH

syntax = "proto3";

option java_multiple_files = true;
option objc_class_prefix   = "ATS";
import "projects.proto";
package aristech.nlp;

/**
 * Describes a single response of an intent.
 */
message OutputMessage {
  enum Channel {
    CHAT  = 0;
    VOICE = 1;
    EMAIL = 2;
  }
  // Channel through which the message is delivered.
  Channel channel = 1;
  // Flexible key/value pairs for message data.
  // Example: "text": "Hello, how can I help?"
  //          "redirect": "intent_123"
  //          "tts_speed": "slow"
  map<string, string> data = 2;
}

/**
 * Represents an intent within a project.
 */
message Intent {
  // Unique ID of the intent.
  string id = 1;
  // Project ID to which this intent belongs.
  string project_id = 2;
  // Default locale for input and output.
  string locale = 3;
  // Topic assignment of the intent.
  string topic = 4;
  // List of inputs (IntentInput) assigned to this intent.
  repeated IntentInput inputs = 5;

  // Old, channel-separated outputs (still present).
  repeated string output_chat  = 6  [deprecated = true];
  repeated string output_voice = 7  [deprecated = true];
  repeated string output_email = 8  [deprecated = true];

  // New, extensible outputs.
  repeated OutputMessage outputs = 15;

  // Relationships to other intents (parents, children, peers).
  repeated Relation related_to = 9;
  // Indicates whether the intent is published (not a draft).
  bool published = 10;

  reserved 11;
  reserved "type";
  // If true, the output of this intent is excluded from search queries.
  bool exclude_output_from_search = 12;
  // List of keywords for targeted search.
  repeated Keyword keywords = 13;
  // ID of the creator of this intent.
  string creator_id = 14;
}

/**
 * Defines an input for an intent.
 * Each input can be identified by UUID; if it does not exist, a new input is created.
 */
message IntentInput {
  // UUID for identification.
  string uuid  = 1;
  // The actual input text.
  string input = 2;
}

/**
 * Relation
 */
message Relation {
  // Parents are intents that are directly related to this intent.
  repeated string parents  = 1;
  // Children are intents that are directly related to this intent.
  repeated string children = 2;
  // Peers are intents that are at the same level in the hierarchy.
  repeated string peers    = 3;
}

/**
 * Represents a keyword for identification or prioritization of an intent.
 */
message Keyword {
  // The keyword.
  string keyword  = 1;
  // Priority (e.g. for ranking).
  int32  priority = 2;
}

/**
 * Used to add or update intents.
 */
message UpdateContentRequest {
  // Intents to add or update.
  repeated Intent intents = 1;
}

/**
 * Contains the status of the update operation.
 */
message UpdateContentResponse {
  // IDs of added or updated intents.
  repeated string intent_ids = 1;
}

/**
 * Used to remove intents.
 */
message RemoveContentRequest {
  // IDs of intents to delete.
  repeated string id  = 1;
  // Project from which to delete.
  string project_id   = 2;
}

/** Confirms removal of intents. */
message RemoveContentResponse {}

/**
 * Retrieves content (intents) and performs similarity searches.
 */
message GetContentRequest {
  string prompt       = 1;
  string project_id   = 2;
  int32  num_results  = 3;
  optional float  threshold         = 4;
  repeated ContentFilter filters    = 5;
  string chat_id                   = 7;
  bool include_unpublished_intents = 8;
}

/**
 * Response to a content query.
 */
message GetContentResponse {
  repeated ContentResponseItem items = 1;
  string chat_id                     = 2;
}

/**
 * Defines filter criteria for content queries.
 */
message ContentFilter {
  string field     = 1;
  string value    = 2;
  string operator = 3;
  repeated string label = 4;
}

/**
 * A single search result.
 */
message ContentResponseItem {
  // ID of the matching IntentInput element.
  string id     = 1;
  // Similarity/relevance score.
  float  score   = 2;
  // Full intent.
  Intent intent = 3;
  // A single fallback message as a string
  string fallback_message = 4;
  repeated FallbackMessage fallback_messages = 5;
  // Number of inputs of the intent that matched the query.
  int32 matched_inputs = 6;
  // Might contain the keyword that resulted in the match rather than semantic similarity search.
  Keyword matched_keyword = 7;
}

/**
 * Requests all intents of a specific project.
 */
message GetIntentsRequest {
  string project_id = 1;
}

/**
 * Determines score limits for a project.
 */
message GetScoreLimitsRequest {
  string project_id = 1;
  repeated string test_sentences_upper_limit = 2;
  repeated string test_sentences_lower_limit = 3;
}

/**
 * Returns the determined score limits for a project.
 */
message GetScoreLimitsResponse {
  float min_threshold = 1;
  float max_threshold = 2;
}

message GetKeywordsRequest {
  string project_id = 1;
}

message GetKeywordsResponse{
  Keyword keyword = 1;
  string id = 2;
}
