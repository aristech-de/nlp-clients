// Copyright Aristech GmbH

syntax = "proto3";
import "projects.proto";
import "intents.proto";

option java_multiple_files = true;
option objc_class_prefix = "ATS";

package aristech.nlp;

/**
 * NLPServer provides the interface for various NLP functionalities.
 * These functions include text processing, content management in projects,
 * and interaction with vectorized data structures.
 */
service NLPServer {
  /**
   * Returns all available processing functions (models) of the server.
   * Each function includes a unique ID, a descriptive name,
   * a description, and a list of possible arguments.
   */
  rpc GetFunctions(FunctionRequest) returns (stream Function) {}

  /**
   * Processes the provided raw text using the specified functions.
   * Multiple functions can be applied sequentially.
   */
  rpc RunFunctions(RunFunctionsRequest) returns (RunFunctionsResponse) {}

  /**
   * Adds new content or updates existing content.
   */
  rpc UpdateContent(UpdateContentRequest) returns (UpdateContentResponse) {}

  /**
   * Removes the specified content.
   */
  rpc RemoveContent(RemoveContentRequest) returns (RemoveContentResponse) {}

  /**
   * Retrieves content that is available both as vectorized data and as plain text.
   */
  rpc GetContent(GetContentRequest) returns (stream GetContentResponse) {}

  /**
   * Initializes a new project.
   */
  rpc AddProject(AddProjectRequest) returns (AddProjectResponse) {}

  /**
   * Removes an existing project and all associated content.
   */
  rpc RemoveProject(RemoveProjectRequest) returns (RemoveProjectResponse) {}

  /**
   * Updates the settings or configuration of an existing project.
   */
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {}

  /**
   * Returns a list of all projects.
   */
  rpc GetProjects(GetProjectsRequest) returns (stream Project) {}

  /**
   * Retrieves all intents of a project.
   */
  rpc GetIntents(GetIntentsRequest) returns (stream Intent) {}

  /**
   * Determines score limits for a project based on test inputs.
   */
  rpc GetScoreLimits(GetScoreLimitsRequest) returns (GetScoreLimitsResponse) {}

  /**
   * Returns a list of available embedding models for similarity searches.
   */
  rpc GetEmbeddingModels(GetEmbeddingModelsRequest) returns (stream EmbeddingModel) {}

  rpc SyncDBs(SyncDBsRequest) returns (SyncDBsResponse) {}

  rpc GetKeywords(GetKeywordsRequest) returns (stream GetKeywordsResponse) {}
}

/**
 * Request for the list of functions provided by the server.
 */
message FunctionRequest {}


/**
 * Describes a specific operation that can be applied to incoming text,
 * such as classification or recasing.
 */
message Function {
  // Unique identifier of the function.
  string id = 1;
  // Descriptive name of the function.
  string name = 2;
  // Detailed description of the function.
  string description = 3;
  // List of arguments accepted by the function.
  repeated string arguments = 4;
}


/**
 * Request to process raw text using specified functions.
 */
message RunFunctionsRequest {
  // List of functions to apply.
  repeated Function functions = 1;
  // The raw text to process.
  string input = 2;
  // Additional parameters for the functions.
  repeated string arguments = 3;
}


/**
 * Response message containing the result of text processing.
 */
message RunFunctionsResponse {
  // The processed text result.
  string output = 1;
}

message SyncDBsRequest {}

message SyncDBsResponse {
  string status = 1;
}