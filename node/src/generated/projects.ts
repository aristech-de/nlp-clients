// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.28.3
// source: projects.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "aristech.nlp";

/** Empty request to retrieve all projects. */
export interface GetProjectsRequest {
}

/** A project represents a collection of intents. */
export interface Project {
  /** Unique ID of the project. */
  id: string;
  /** Name of the project. */
  name: string;
}

/** Request to add a new project. */
export interface AddProjectRequest {
  /** Name of the project. */
  name: string;
  /** Description of the project. */
  description: string;
  /** Model used for vectorization. */
  embeddingModel:
    | EmbeddingModel
    | undefined;
  /** Predefined fallback messages for different channels. */
  fallbackMessages: FallbackMessage[];
  /** Default threshold for search queries. */
  defaultThreshold: number;
  /** ID of the associated team. */
  teamId: string;
  /** Enables debug mode for the project. */
  debugMode: boolean;
  /** Exclude output from search queries. */
  excludeOutputFromSearch: boolean;
  /** Metadata about creation and changes. */
  history:
    | History
    | undefined;
  /** Configuration-specific identifier. */
  configSlug: string;
  /** URL-friendly identifier of the project. */
  slug: string;
}

/** Represents a fallback message used when no direct answer or match is found. */
export interface FallbackMessage {
  /** The fallback message text. */
  message: string;
  /** The channel for which this message is intended (e.g., CHAT, EMAIL, VOICE). */
  channel: FallbackMessage_Channel;
  /** Map for structured fallback messages. */
  messageMap: { [key: string]: string };
}

export enum FallbackMessage_Channel {
  CHAT = 0,
  EMAIL = 1,
  VOICE = 2,
  UNRECOGNIZED = -1,
}

export function fallbackMessage_ChannelFromJSON(object: any): FallbackMessage_Channel {
  switch (object) {
    case 0:
    case "CHAT":
      return FallbackMessage_Channel.CHAT;
    case 1:
    case "EMAIL":
      return FallbackMessage_Channel.EMAIL;
    case 2:
    case "VOICE":
      return FallbackMessage_Channel.VOICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FallbackMessage_Channel.UNRECOGNIZED;
  }
}

export function fallbackMessage_ChannelToJSON(object: FallbackMessage_Channel): string {
  switch (object) {
    case FallbackMessage_Channel.CHAT:
      return "CHAT";
    case FallbackMessage_Channel.EMAIL:
      return "EMAIL";
    case FallbackMessage_Channel.VOICE:
      return "VOICE";
    case FallbackMessage_Channel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FallbackMessage_MessageMapEntry {
  key: string;
  value: string;
}

/** Stores metadata about the history of a project. */
export interface History {
  /** IDs of the creator and last editor. */
  creatorId: string;
  /** ID of the last person who changed the project. */
  changedBy: string;
  /** Creation date of the project. */
  creationDate: string;
  /** Date of the last edit to the project. */
  lastEditDate: string;
}

/** Response message for project creation. */
export interface AddProjectResponse {
  /** ID of the newly created project. */
  projectId: string;
}

/** Request to remove a project. */
export interface RemoveProjectRequest {
  /** ID of the project to remove. */
  projectId: string;
}

/** Response message for project removal. */
export interface RemoveProjectResponse {
}

/** Request to retrieve all available embedding models. */
export interface GetEmbeddingModelsRequest {
}

/** Represents a model for vectorizing content. */
export interface EmbeddingModel {
  /** Name of the embedding model. */
  name: string;
  /** Number of dimensions of the embedding. */
  dimensions: number;
  /** Base library used for the embedding model. */
  baseLibrary: string;
  /** List of supported locales for the embedding model. */
  locale: string[];
}

/** Request to update an existing project or create a new one if no project_id is provided. */
export interface UpdateProjectRequest {
  /** ID of the project to update. If missing, a new project is created. */
  projectId: string;
  /** Name of the project. */
  name: string;
  /** Description of the project. */
  description: string;
  /** Model used for vectorization. */
  embeddingModel:
    | EmbeddingModel
    | undefined;
  /** Predefined fallback messages for different channels. */
  fallbackMessages: FallbackMessage[];
  /** Default threshold for search queries. */
  defaultThreshold: number;
  /** Enables debug mode for the project. */
  debugMode: boolean;
  /** Exclude output from search queries. */
  excludeOutputFromSearch: boolean;
  /** Metadata about creation and changes. */
  history:
    | History
    | undefined;
  /** Configuration-specific identifier. */
  configSlug: string;
  /** URL-friendly identifier of the project. */
  slug: string;
}

/** Response message for project update or creation. */
export interface UpdateProjectResponse {
}

function createBaseGetProjectsRequest(): GetProjectsRequest {
  return {};
}

export const GetProjectsRequest: MessageFns<GetProjectsRequest> = {
  encode(_: GetProjectsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProjectsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetProjectsRequest {
    return {};
  },

  toJSON(_: GetProjectsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProjectsRequest>, I>>(base?: I): GetProjectsRequest {
    return GetProjectsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProjectsRequest>, I>>(_: I): GetProjectsRequest {
    const message = createBaseGetProjectsRequest();
    return message;
  },
};

function createBaseProject(): Project {
  return { id: "", name: "" };
}

export const Project: MessageFns<Project> = {
  encode(message: Project, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Project {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Project {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Project): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Project>, I>>(base?: I): Project {
    return Project.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Project>, I>>(object: I): Project {
    const message = createBaseProject();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAddProjectRequest(): AddProjectRequest {
  return {
    name: "",
    description: "",
    embeddingModel: undefined,
    fallbackMessages: [],
    defaultThreshold: 0,
    teamId: "",
    debugMode: false,
    excludeOutputFromSearch: false,
    history: undefined,
    configSlug: "",
    slug: "",
  };
}

export const AddProjectRequest: MessageFns<AddProjectRequest> = {
  encode(message: AddProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.embeddingModel !== undefined) {
      EmbeddingModel.encode(message.embeddingModel, writer.uint32(26).fork()).join();
    }
    for (const v of message.fallbackMessages) {
      FallbackMessage.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.defaultThreshold !== 0) {
      writer.uint32(45).float(message.defaultThreshold);
    }
    if (message.teamId !== "") {
      writer.uint32(50).string(message.teamId);
    }
    if (message.debugMode !== false) {
      writer.uint32(56).bool(message.debugMode);
    }
    if (message.excludeOutputFromSearch !== false) {
      writer.uint32(64).bool(message.excludeOutputFromSearch);
    }
    if (message.history !== undefined) {
      History.encode(message.history, writer.uint32(74).fork()).join();
    }
    if (message.configSlug !== "") {
      writer.uint32(82).string(message.configSlug);
    }
    if (message.slug !== "") {
      writer.uint32(90).string(message.slug);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.embeddingModel = EmbeddingModel.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fallbackMessages.push(FallbackMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.defaultThreshold = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.debugMode = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.excludeOutputFromSearch = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.history = History.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.configSlug = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      embeddingModel: isSet(object.embeddingModel) ? EmbeddingModel.fromJSON(object.embeddingModel) : undefined,
      fallbackMessages: globalThis.Array.isArray(object?.fallbackMessages)
        ? object.fallbackMessages.map((e: any) => FallbackMessage.fromJSON(e))
        : [],
      defaultThreshold: isSet(object.defaultThreshold) ? globalThis.Number(object.defaultThreshold) : 0,
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      debugMode: isSet(object.debugMode) ? globalThis.Boolean(object.debugMode) : false,
      excludeOutputFromSearch: isSet(object.excludeOutputFromSearch)
        ? globalThis.Boolean(object.excludeOutputFromSearch)
        : false,
      history: isSet(object.history) ? History.fromJSON(object.history) : undefined,
      configSlug: isSet(object.configSlug) ? globalThis.String(object.configSlug) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
    };
  },

  toJSON(message: AddProjectRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.embeddingModel !== undefined) {
      obj.embeddingModel = EmbeddingModel.toJSON(message.embeddingModel);
    }
    if (message.fallbackMessages?.length) {
      obj.fallbackMessages = message.fallbackMessages.map((e) => FallbackMessage.toJSON(e));
    }
    if (message.defaultThreshold !== 0) {
      obj.defaultThreshold = message.defaultThreshold;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.debugMode !== false) {
      obj.debugMode = message.debugMode;
    }
    if (message.excludeOutputFromSearch !== false) {
      obj.excludeOutputFromSearch = message.excludeOutputFromSearch;
    }
    if (message.history !== undefined) {
      obj.history = History.toJSON(message.history);
    }
    if (message.configSlug !== "") {
      obj.configSlug = message.configSlug;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectRequest>, I>>(base?: I): AddProjectRequest {
    return AddProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectRequest>, I>>(object: I): AddProjectRequest {
    const message = createBaseAddProjectRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.embeddingModel = (object.embeddingModel !== undefined && object.embeddingModel !== null)
      ? EmbeddingModel.fromPartial(object.embeddingModel)
      : undefined;
    message.fallbackMessages = object.fallbackMessages?.map((e) => FallbackMessage.fromPartial(e)) || [];
    message.defaultThreshold = object.defaultThreshold ?? 0;
    message.teamId = object.teamId ?? "";
    message.debugMode = object.debugMode ?? false;
    message.excludeOutputFromSearch = object.excludeOutputFromSearch ?? false;
    message.history = (object.history !== undefined && object.history !== null)
      ? History.fromPartial(object.history)
      : undefined;
    message.configSlug = object.configSlug ?? "";
    message.slug = object.slug ?? "";
    return message;
  },
};

function createBaseFallbackMessage(): FallbackMessage {
  return { message: "", channel: 0, messageMap: {} };
}

export const FallbackMessage: MessageFns<FallbackMessage> = {
  encode(message: FallbackMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.channel !== 0) {
      writer.uint32(16).int32(message.channel);
    }
    Object.entries(message.messageMap).forEach(([key, value]) => {
      FallbackMessage_MessageMapEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FallbackMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFallbackMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.channel = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = FallbackMessage_MessageMapEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.messageMap[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FallbackMessage {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      channel: isSet(object.channel) ? fallbackMessage_ChannelFromJSON(object.channel) : 0,
      messageMap: isObject(object.messageMap)
        ? Object.entries(object.messageMap).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: FallbackMessage): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.channel !== 0) {
      obj.channel = fallbackMessage_ChannelToJSON(message.channel);
    }
    if (message.messageMap) {
      const entries = Object.entries(message.messageMap);
      if (entries.length > 0) {
        obj.messageMap = {};
        entries.forEach(([k, v]) => {
          obj.messageMap[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FallbackMessage>, I>>(base?: I): FallbackMessage {
    return FallbackMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FallbackMessage>, I>>(object: I): FallbackMessage {
    const message = createBaseFallbackMessage();
    message.message = object.message ?? "";
    message.channel = object.channel ?? 0;
    message.messageMap = Object.entries(object.messageMap ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseFallbackMessage_MessageMapEntry(): FallbackMessage_MessageMapEntry {
  return { key: "", value: "" };
}

export const FallbackMessage_MessageMapEntry: MessageFns<FallbackMessage_MessageMapEntry> = {
  encode(message: FallbackMessage_MessageMapEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FallbackMessage_MessageMapEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFallbackMessage_MessageMapEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FallbackMessage_MessageMapEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: FallbackMessage_MessageMapEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FallbackMessage_MessageMapEntry>, I>>(base?: I): FallbackMessage_MessageMapEntry {
    return FallbackMessage_MessageMapEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FallbackMessage_MessageMapEntry>, I>>(
    object: I,
  ): FallbackMessage_MessageMapEntry {
    const message = createBaseFallbackMessage_MessageMapEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseHistory(): History {
  return { creatorId: "", changedBy: "", creationDate: "", lastEditDate: "" };
}

export const History: MessageFns<History> = {
  encode(message: History, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creatorId !== "") {
      writer.uint32(10).string(message.creatorId);
    }
    if (message.changedBy !== "") {
      writer.uint32(18).string(message.changedBy);
    }
    if (message.creationDate !== "") {
      writer.uint32(26).string(message.creationDate);
    }
    if (message.lastEditDate !== "") {
      writer.uint32(34).string(message.lastEditDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): History {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creatorId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.changedBy = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.creationDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastEditDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): History {
    return {
      creatorId: isSet(object.creatorId) ? globalThis.String(object.creatorId) : "",
      changedBy: isSet(object.changedBy) ? globalThis.String(object.changedBy) : "",
      creationDate: isSet(object.creationDate) ? globalThis.String(object.creationDate) : "",
      lastEditDate: isSet(object.lastEditDate) ? globalThis.String(object.lastEditDate) : "",
    };
  },

  toJSON(message: History): unknown {
    const obj: any = {};
    if (message.creatorId !== "") {
      obj.creatorId = message.creatorId;
    }
    if (message.changedBy !== "") {
      obj.changedBy = message.changedBy;
    }
    if (message.creationDate !== "") {
      obj.creationDate = message.creationDate;
    }
    if (message.lastEditDate !== "") {
      obj.lastEditDate = message.lastEditDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<History>, I>>(base?: I): History {
    return History.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<History>, I>>(object: I): History {
    const message = createBaseHistory();
    message.creatorId = object.creatorId ?? "";
    message.changedBy = object.changedBy ?? "";
    message.creationDate = object.creationDate ?? "";
    message.lastEditDate = object.lastEditDate ?? "";
    return message;
  },
};

function createBaseAddProjectResponse(): AddProjectResponse {
  return { projectId: "" };
}

export const AddProjectResponse: MessageFns<AddProjectResponse> = {
  encode(message: AddProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProjectResponse {
    return { projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "" };
  },

  toJSON(message: AddProjectResponse): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddProjectResponse>, I>>(base?: I): AddProjectResponse {
    return AddProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddProjectResponse>, I>>(object: I): AddProjectResponse {
    const message = createBaseAddProjectResponse();
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseRemoveProjectRequest(): RemoveProjectRequest {
  return { projectId: "" };
}

export const RemoveProjectRequest: MessageFns<RemoveProjectRequest> = {
  encode(message: RemoveProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProjectRequest {
    return { projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "" };
  },

  toJSON(message: RemoveProjectRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectRequest>, I>>(base?: I): RemoveProjectRequest {
    return RemoveProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectRequest>, I>>(object: I): RemoveProjectRequest {
    const message = createBaseRemoveProjectRequest();
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseRemoveProjectResponse(): RemoveProjectResponse {
  return {};
}

export const RemoveProjectResponse: MessageFns<RemoveProjectResponse> = {
  encode(_: RemoveProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveProjectResponse {
    return {};
  },

  toJSON(_: RemoveProjectResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProjectResponse>, I>>(base?: I): RemoveProjectResponse {
    return RemoveProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProjectResponse>, I>>(_: I): RemoveProjectResponse {
    const message = createBaseRemoveProjectResponse();
    return message;
  },
};

function createBaseGetEmbeddingModelsRequest(): GetEmbeddingModelsRequest {
  return {};
}

export const GetEmbeddingModelsRequest: MessageFns<GetEmbeddingModelsRequest> = {
  encode(_: GetEmbeddingModelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEmbeddingModelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmbeddingModelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetEmbeddingModelsRequest {
    return {};
  },

  toJSON(_: GetEmbeddingModelsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEmbeddingModelsRequest>, I>>(base?: I): GetEmbeddingModelsRequest {
    return GetEmbeddingModelsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEmbeddingModelsRequest>, I>>(_: I): GetEmbeddingModelsRequest {
    const message = createBaseGetEmbeddingModelsRequest();
    return message;
  },
};

function createBaseEmbeddingModel(): EmbeddingModel {
  return { name: "", dimensions: 0, baseLibrary: "", locale: [] };
}

export const EmbeddingModel: MessageFns<EmbeddingModel> = {
  encode(message: EmbeddingModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dimensions !== 0) {
      writer.uint32(16).int32(message.dimensions);
    }
    if (message.baseLibrary !== "") {
      writer.uint32(26).string(message.baseLibrary);
    }
    for (const v of message.locale) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmbeddingModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmbeddingModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.dimensions = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.baseLibrary = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.locale.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmbeddingModel {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dimensions: isSet(object.dimensions) ? globalThis.Number(object.dimensions) : 0,
      baseLibrary: isSet(object.baseLibrary) ? globalThis.String(object.baseLibrary) : "",
      locale: globalThis.Array.isArray(object?.locale) ? object.locale.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: EmbeddingModel): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dimensions !== 0) {
      obj.dimensions = Math.round(message.dimensions);
    }
    if (message.baseLibrary !== "") {
      obj.baseLibrary = message.baseLibrary;
    }
    if (message.locale?.length) {
      obj.locale = message.locale;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmbeddingModel>, I>>(base?: I): EmbeddingModel {
    return EmbeddingModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmbeddingModel>, I>>(object: I): EmbeddingModel {
    const message = createBaseEmbeddingModel();
    message.name = object.name ?? "";
    message.dimensions = object.dimensions ?? 0;
    message.baseLibrary = object.baseLibrary ?? "";
    message.locale = object.locale?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateProjectRequest(): UpdateProjectRequest {
  return {
    projectId: "",
    name: "",
    description: "",
    embeddingModel: undefined,
    fallbackMessages: [],
    defaultThreshold: 0,
    debugMode: false,
    excludeOutputFromSearch: false,
    history: undefined,
    configSlug: "",
    slug: "",
  };
}

export const UpdateProjectRequest: MessageFns<UpdateProjectRequest> = {
  encode(message: UpdateProjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.embeddingModel !== undefined) {
      EmbeddingModel.encode(message.embeddingModel, writer.uint32(34).fork()).join();
    }
    for (const v of message.fallbackMessages) {
      FallbackMessage.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.defaultThreshold !== 0) {
      writer.uint32(53).float(message.defaultThreshold);
    }
    if (message.debugMode !== false) {
      writer.uint32(56).bool(message.debugMode);
    }
    if (message.excludeOutputFromSearch !== false) {
      writer.uint32(64).bool(message.excludeOutputFromSearch);
    }
    if (message.history !== undefined) {
      History.encode(message.history, writer.uint32(74).fork()).join();
    }
    if (message.configSlug !== "") {
      writer.uint32(82).string(message.configSlug);
    }
    if (message.slug !== "") {
      writer.uint32(90).string(message.slug);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.embeddingModel = EmbeddingModel.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fallbackMessages.push(FallbackMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.defaultThreshold = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.debugMode = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.excludeOutputFromSearch = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.history = History.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.configSlug = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      embeddingModel: isSet(object.embeddingModel) ? EmbeddingModel.fromJSON(object.embeddingModel) : undefined,
      fallbackMessages: globalThis.Array.isArray(object?.fallbackMessages)
        ? object.fallbackMessages.map((e: any) => FallbackMessage.fromJSON(e))
        : [],
      defaultThreshold: isSet(object.defaultThreshold) ? globalThis.Number(object.defaultThreshold) : 0,
      debugMode: isSet(object.debugMode) ? globalThis.Boolean(object.debugMode) : false,
      excludeOutputFromSearch: isSet(object.excludeOutputFromSearch)
        ? globalThis.Boolean(object.excludeOutputFromSearch)
        : false,
      history: isSet(object.history) ? History.fromJSON(object.history) : undefined,
      configSlug: isSet(object.configSlug) ? globalThis.String(object.configSlug) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
    };
  },

  toJSON(message: UpdateProjectRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.embeddingModel !== undefined) {
      obj.embeddingModel = EmbeddingModel.toJSON(message.embeddingModel);
    }
    if (message.fallbackMessages?.length) {
      obj.fallbackMessages = message.fallbackMessages.map((e) => FallbackMessage.toJSON(e));
    }
    if (message.defaultThreshold !== 0) {
      obj.defaultThreshold = message.defaultThreshold;
    }
    if (message.debugMode !== false) {
      obj.debugMode = message.debugMode;
    }
    if (message.excludeOutputFromSearch !== false) {
      obj.excludeOutputFromSearch = message.excludeOutputFromSearch;
    }
    if (message.history !== undefined) {
      obj.history = History.toJSON(message.history);
    }
    if (message.configSlug !== "") {
      obj.configSlug = message.configSlug;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectRequest>, I>>(base?: I): UpdateProjectRequest {
    return UpdateProjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectRequest>, I>>(object: I): UpdateProjectRequest {
    const message = createBaseUpdateProjectRequest();
    message.projectId = object.projectId ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.embeddingModel = (object.embeddingModel !== undefined && object.embeddingModel !== null)
      ? EmbeddingModel.fromPartial(object.embeddingModel)
      : undefined;
    message.fallbackMessages = object.fallbackMessages?.map((e) => FallbackMessage.fromPartial(e)) || [];
    message.defaultThreshold = object.defaultThreshold ?? 0;
    message.debugMode = object.debugMode ?? false;
    message.excludeOutputFromSearch = object.excludeOutputFromSearch ?? false;
    message.history = (object.history !== undefined && object.history !== null)
      ? History.fromPartial(object.history)
      : undefined;
    message.configSlug = object.configSlug ?? "";
    message.slug = object.slug ?? "";
    return message;
  },
};

function createBaseUpdateProjectResponse(): UpdateProjectResponse {
  return {};
}

export const UpdateProjectResponse: MessageFns<UpdateProjectResponse> = {
  encode(_: UpdateProjectResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProjectResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateProjectResponse {
    return {};
  },

  toJSON(_: UpdateProjectResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectResponse>, I>>(base?: I): UpdateProjectResponse {
    return UpdateProjectResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectResponse>, I>>(_: I): UpdateProjectResponse {
    const message = createBaseUpdateProjectResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
